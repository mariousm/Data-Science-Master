dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
#cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
#cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
#cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
#cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
min(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
#cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
#cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
min(df$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
#cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
#cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining) # Fecha de Club_Joining máxima
#cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
#cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
summary(df_copy$Club_Joining)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", dMinClubJoining)
cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", as.character(dMinClubJoining))
cat("La fecha máxima de Club_Joining es: ", dMaxClubJoining)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", as.character(dMinClubJoining))
cat("La fecha máxima de Club_Joining es: ", as.character(dMaxClubJoining))
summary(df_copy$Club_Joining)
summary(df_copy$Club_Joining)
df_copy[df_copy$Club_Joining == NA]
summary(df_copy$Club_Joining)
df_copy[is.na(df_copy$Club_Joining)]
summary(df_copy$Club_Joining)
df_copy[is.na(df_copy$Club_Joining),]
summary(df_copy$Club_Joining)
df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Contract_Expiry < df_copy$Club_Joining,]
df_copy[df_copy$Contract_Expiry < df_copy$Club_Joining, c("ID", "Name", "Club_Joining", "Contract_Expiry")]
df_copy$Club_Joining = df$Club_Joining
df_copy$Contract_Expiry = df$Contract_Expiry
df_copy$Club_Joining = as.Date(df_copy$Club_Joining, format = "%m/%d/%Y")
df_copy$Contract_Expiry = as.Date(as.character(df_copy$Contract_Expiry), format = "%m%d%Y")
str(df_copy$Club_Joining)
str(df_copy$Contract_Expiry)
df_copy$Club_Joining = df$Club_Joining
df_copy$Contract_Expiry = df$Contract_Expiry
df_copy$Club_Joining = as.Date(df_copy$Club_Joining, format = "%m/%d/%Y")
df_copy$Contract_Expiry = as.Date(paste("1231", as.character(df_copy$Contract_Expiry)), format = "%m%d%Y")
str(df_copy$Club_Joining)
str(df_copy$Contract_Expiry)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", as.character(dMinClubJoining))
cat("La fecha máxima de Club_Joining es: ", as.character(dMaxClubJoining))
summary(df_copy$Club_Joining)
df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Contract_Expiry < df_copy$Club_Joining, c("ID", "Name", "Club_Joining", "Contract_Expiry")]
fecha = as.Date("01/01/2017", "%m/%d/%Y")
fecha
fecha = as.Date("01/01/2017", "%m/%d/%Y")
class(fecha)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value)
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value)
nAge
}
#sapply(df_copy$Birth_Date, calculateAge)
head(df_copy)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value)
nAge
}
#sapply(df_copy$Birth_Date, calculateAge)
head(df_copy)
df_copy$Birth_Date = as.Date(df_copy$Birth_Date, format = "%m/%d/%Y")
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value)
nAge
}
#sapply(df_copy$Birth_Date, calculateAge)
head(df_copy)
str(df_copy$Birth_Date)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value)
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value, units = "years")
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = difftime(fecha, value, units = "days")
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = fecha - value
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = year(fecha) - year(value)
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
sapply(df_copy$Birth_Date, calculateAge)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Birth_Date)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / (60 * 60 * 24 * 365)
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = (fecha - value) / 365
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
df_copy$Age[df_copy$Age != sapply(df_copy$Birth_Date, calculateAge),]
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
df_copy$Age[df_copy$Age != sapply(df_copy$Birth_Date, calculateAge)]
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
vAges = sapply(df_copy$Birth_Date, calculateAge)
head(sapply(df_copy$Birth_Date, calculateAge))
head(df_copy$Age)
df_copy$Age[df_copy$Age != vAges] = vAges
head(df_copy$Age)
df_copy$Age = df$Age
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
vAges = sapply(df_copy$Birth_Date, calculateAge)
head(vAges)
head(df_copy$Age)
df_copy$Age != vAges
#df_copy$Age[df_copy$Age != vAges] = vAges
#head(df_copy$Age)
df_copy$Age = df$Age
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
vAges = sapply(df_copy$Birth_Date, calculateAge)
head(vAges)
head(df_copy$Age)
vIndex = df_copy$Age != vAges
df_copy$Age[vIndex] = vAges[vIndex]
head(df_copy$Age)
vIndex = df_copy$Age != vAges # Obtenemos dónde hay que realizar el cambio de la edad
df_copy$Age[vIndex] = vAges[vIndex] # Realizamos el cambio
head(df_copy$Age) # Resultado
df_copy$Age = df$Age
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
vAges = sapply(df_copy$Birth_Date, calculateAge) # Calculamos todas las edades
head(vAges) # Nuevas edades
head(df_copy$Age) # Edades pasadas
vIndex = df_copy$Age != vAges # Obtenemos dónde hay que realizar el cambio de la edad
df_copy$Age[vIndex] = vAges[vIndex] # Realizamos el cambio
head(df_copy$Age) # Resultado
knitr::opts_chunk$set(echo = TRUE)
df = read.csv(file="./data/fifa_raw.csv", sep=",", encoding="UTF-8") #Hay que hacer el encoding ya que de lo contrario leía mal los datos, por ejemplo Luis Suárez no identifica bien el caracter con tilde
df_copy = df # Realizamos una copia del dataframe original, para así modificar la copia de éste y mantener los datos originales
head(df_copy)
str(df_copy)
nRows = nrow(df_copy) # Número de registros (filas) que hay en el df
nUniques = length(unique(df_copy[["ID"]])) # Número de valores únicos de ID en el df
cat("El número de registros duplicados con el valor ID son: ", nRows - nUniques)
nMinRating = min(df_copy$Rating) # Valor de rating mínimo
nMaxRating = max(df_copy$Rating) # Valor de rating máximo
cat("El valor mínimo de rating es: ", nMinRating)
cat("El valor máximo de rating es: ", nMaxRating)
length(unique(df_copy[["Name"]]))
length(unique(df_copy[["ID"]]))
length(unique(df_copy[["Name"]]))
length(unique(df_copy))
length(unique(df_copy[,]))
length(unique(df_copy))
df_copy[!duplicated(df_copy),]
df_copy[duplicated(df_copy),]
duplicated(df_copy)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados con el valor ID son: ", nUniques)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados con el valor ID son: ", nRows - nUniques)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados son: ", nRows - nUniques)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados son: ", nRows - nUniques)
nMinRating = min(df_copy$Rating) # Valor de rating mínimo
nMaxRating = max(df_copy$Rating) # Valor de rating máximo
cat("El valor mínimo de rating es: ", nMinRating)
cat("El valor máximo de rating es: ", nMaxRating)
nMinRating = min(df_copy$Rating) # Valor de rating mínimo
nMaxRating = max(df_copy$Rating) # Valor de rating máximo
cat("El valor mínimo de rating es: ", nMinRating)
cat("El valor máximo de rating es: ", nMaxRating)
# Método que nos permite hacer la conversión tanto para la variable Height como Weight
heiWeiFromCharToNumeric = function(value) {
if (!is.na(value) & is.character(value)) {
lstPairValues = strsplit(value, "[[:space:]]+")
if (toupper(lstPairValues[[1]][2]) == "M") return(as.numeric(gsub(",", ".", lstPairValues[[1]][1])) * 100)
if (toupper(lstPairValues[[1]][2]) == "CM") return(as.numeric(lstPairValues[[1]][1]))
if (toupper(lstPairValues[[1]][2]) == "KG") return(as.numeric(gsub(",", ".", lstPairValues[[1]][1])))
if (toupper(lstPairValues[[1]][2]) == "GR") return(as.numeric(lstPairValues[[1]][1]) / 1000)
} else {
return(NA)
}
}
df_copy$Height = sapply(df_copy$Height, heiWeiFromCharToNumeric)
str(df_copy$Height)
# Hacemos uso de la función anterior para realizar la conversión
df_copy$Weight = sapply(df_copy$Weight, heiWeiFromCharToNumeric)
str(df_copy$Weight)
# Método que nos permite hacer la conversión tanto para la variable Height como Weight
heiWeiFromCharToNumeric = function(value) {
if (!is.na(value) & is.character(value)) {
lstPairValues = strsplit(value, "[[:space:]]+")
if (toupper(lstPairValues[[1]][2]) == "M") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1])) * 100))
if (toupper(lstPairValues[[1]][2]) == "CM") return(trunc(as.numeric(lstPairValues[[1]][1])))
if (toupper(lstPairValues[[1]][2]) == "KG") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1]))))
if (toupper(lstPairValues[[1]][2]) == "GR") return(trunc(as.numeric(lstPairValues[[1]][1]) / 1000))
} else {
return(NA)
}
}
df_copy$Height = sapply(df_copy$Height, heiWeiFromCharToNumeric)
str(df_copy$Height)
df = read.csv(file="./data/fifa_raw.csv", sep=",", encoding="UTF-8") #Hay que hacer el encoding ya que de lo contrario leía mal los datos, por ejemplo Luis Suárez no identifica bien el caracter con tilde
df_copy = df # Realizamos una copia del dataframe original, para así modificar la copia de éste y mantener los datos originales
head(df_copy)
str(df_copy)
nRows = nrow(df_copy) # Número de registros (filas) que hay en el df
nUniques = length(unique(df_copy[["ID"]])) # Número de valores únicos de ID en el df
cat("El número de registros duplicados con el valor ID son: ", nRows - nUniques)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados son: ", nRows - nUniques)
nMinRating = min(df_copy$Rating) # Valor de rating mínimo
nMaxRating = max(df_copy$Rating) # Valor de rating máximo
cat("El valor mínimo de rating es: ", nMinRating)
cat("El valor máximo de rating es: ", nMaxRating)
# Método que nos permite hacer la conversión tanto para la variable Height como Weight
heiWeiFromCharToNumeric = function(value) {
if (!is.na(value) & is.character(value)) {
lstPairValues = strsplit(value, "[[:space:]]+")
if (toupper(lstPairValues[[1]][2]) == "M") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1])) * 100))
if (toupper(lstPairValues[[1]][2]) == "CM") return(trunc(as.numeric(lstPairValues[[1]][1])))
if (toupper(lstPairValues[[1]][2]) == "KG") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1]))))
if (toupper(lstPairValues[[1]][2]) == "GR") return(trunc(as.numeric(lstPairValues[[1]][1]) / 1000))
} else {
return(NA)
}
}
df_copy$Height = sapply(df_copy$Height, heiWeiFromCharToNumeric)
str(df_copy$Height)
# Hacemos uso de la función anterior para realizar la conversión
df_copy$Weight = sapply(df_copy$Weight, heiWeiFromCharToNumeric)
str(df_copy$Weight)
head(df_copy)
df = read.csv(file="./data/fifa_raw.csv", sep=",", encoding="UTF-8") #Hay que hacer el encoding ya que de lo contrario leía mal los datos, por ejemplo Luis Suárez no identifica bien el caracter con tilde
df_copy = df # Realizamos una copia del dataframe original, para así modificar la copia de éste y mantener los datos originales
head(df_copy)
str(df_copy)
nRows = nrow(df_copy) # Número de registros (filas) que hay en el df
nUniques = length(unique(df_copy[["ID"]])) # Número de valores únicos de ID en el df
cat("El número de registros duplicados con el valor ID son: ", nRows - nUniques)
nUniques = length(duplicated(df_copy)) # Número de valores duplicados en el df
cat("El número de registros duplicados son: ", nRows - nUniques)
nMinRating = min(df_copy$Rating) # Valor de rating mínimo
nMaxRating = max(df_copy$Rating) # Valor de rating máximo
cat("El valor mínimo de rating es: ", nMinRating)
cat("El valor máximo de rating es: ", nMaxRating)
# Método que nos permite hacer la conversión tanto para la variable Height como Weight
heiWeiFromCharToNumeric = function(value) {
if (!is.na(value) & is.character(value)) {
lstPairValues = strsplit(value, "[[:space:]]+")
if (toupper(lstPairValues[[1]][2]) == "M") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1])) * 100))
if (toupper(lstPairValues[[1]][2]) == "CM") return(trunc(as.numeric(lstPairValues[[1]][1])))
if (toupper(lstPairValues[[1]][2]) == "KG") return(trunc(as.numeric(gsub(",", ".", lstPairValues[[1]][1]))))
if (toupper(lstPairValues[[1]][2]) == "GR") return(trunc(as.numeric(lstPairValues[[1]][1]) / 1000))
} else {
return(NA)
}
}
df_copy$Height = sapply(df_copy$Height, heiWeiFromCharToNumeric)
str(df_copy$Height)
# Hacemos uso de la función anterior para realizar la conversión
df_copy$Weight = sapply(df_copy$Weight, heiWeiFromCharToNumeric)
str(df_copy$Weight)
head(df_copy)
# Método que elimina los espacios en blanco del principio y del final
trim = function (x) gsub("^\\s+|\\s+$", "", x)
# Método convierte el valor de entrada en un nuevo valor en el que la primera letra de cada palabra empieza por mayúscula.
firstLettertoUpperCase = function(value) {
cValue = trim(value)
lstValues = strsplit(cValue, "[^[a-zA-Z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F0-9]+]*")[[1]] #Código Unicode de los caracteres latín
paste(toupper(substring(lstValues, 1,1)), tolower(substring(lstValues, 2)), sep="", collapse=" ")
}
# Hacemos uso de la función anterior para que transforme el dato Name
df_copy$Name = sapply(df_copy$Name, firstLettertoUpperCase)
str(df_copy$Name)
# Hacemos uso de la función anterior para que transforme el dato de Nationality
df_copy$Nationality = sapply(df_copy$Nationality, firstLettertoUpperCase)
str(df_copy$Nationality)
df_copy$Preffered_Foot[df_copy$Preffered_Foot == 1] = "Left"
df_copy$Preffered_Foot[df_copy$Preffered_Foot == 2] = "Right"
str(df_copy$Preffered_Foot)
unique(df_copy$Work_Rate)
df_copy$Work_Rate = df$Work_Rate
# Método que completa las abreviaturas de la variable Work_Rate por su nombre completo
transformWorkRate = function(value) {
lstValues = strsplit(value, "\\s+")
cReturn = ""
for (element in lstValues[[1]]) {
if (toupper(element) == "LOW") cReturn = paste(cReturn, "Low", sep = "", collapse = NULL)
if (toupper(element) == "MED" | toupper(element) == "MEDIUM") cReturn = paste(cReturn, "Medium", sep = "", collapse = NULL)
if (toupper(element) == "HIG" | toupper(element) == "HIGH") cReturn = paste(cReturn, "High", sep = "", collapse = NULL)
if (element == "/") cReturn = paste(cReturn, "/ ")
}
cReturn
}
df_copy$Work_Rate = sapply(df_copy$Work_Rate, transformWorkRate)
unique(df_copy$Work_Rate)
head(df_copy)
df_copy$Club_Joining = as.Date(df_copy$Club_Joining, format = "%m/%d/%Y")
df_copy$Contract_Expiry = as.Date(paste("0630", as.character(df_copy$Contract_Expiry)), format = "%m%d%Y")
str(df_copy$Club_Joining)
str(df_copy$Contract_Expiry)
dMinClubJoining = min(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining mínima
dMaxClubJoining = max(df_copy$Club_Joining, na.rm = TRUE) # Fecha de Club_Joining máxima
cat("La fecha mínima de Club_Joining es: ", as.character(dMinClubJoining))
cat("La fecha máxima de Club_Joining es: ", as.character(dMaxClubJoining))
#summary(df_copy$Club_Joining)
#df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Club_Joining > 2017,]
#summary(df_copy$Club_Joining)
#df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Club_Joining > 2017]
#summary(df_copy$Club_Joining)
#df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Club_Joining > 2017,]
#summary(df_copy$Club_Joining)
#df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), ]
#summary(df_copy$Club_Joining)
#df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), c("ID", "Name", "Club_Joining")]
summary(df_copy$Club_Joining)
df_copy[is.na(df_copy$Club_Joining), c("ID", "Name", "Club_Joining")]
cat("El número de jugadores que se unieron a partir del 2017 son: ", nrow(df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), c("ID", "Name", "Club_Joining")]))
head(df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), c("ID", "Name", "Club_Joining")])
cat("El número de jugadores que se unieron a un equipo a partir del 2017 es: ", nrow(df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), c("ID", "Name", "Club_Joining")]))
head(df_copy[df_copy$Club_Joining >= as.Date("01/01/2017", format = "%m/%d/%Y"), c("ID", "Name", "Club_Joining")])
df_copy[df_copy$Contract_Expiry < df_copy$Club_Joining, c("ID", "Name", "Club_Joining", "Contract_Expiry")]
df_copy[df_copy$Contract_Expiry < df_copy$Club_Joining, c("ID", "Name", "Club_Joining", "Contract_Expiry")]
df_copy$Birth_Date = as.Date(df_copy$Birth_Date, format = "%m/%d/%Y")
str(df_copy$Birth_Date)
# Método que calcula la edad a 1/1/2017
calculateAge = function(value) {
fecha = as.Date("01/01/2017", "%m/%d/%Y")
nAge = as.integer((fecha - value) / 365)
nAge
}
vAges = sapply(df_copy$Birth_Date, calculateAge) # Calculamos todas las edades
head(vAges) # Nuevas edades
head(df_copy$Age) # Edades pasadas
vIndex = df_copy$Age != vAges # Obtenemos dónde hay que realizar el cambio de la edad
df_copy$Age[vIndex] = vAges[vIndex] # Realizamos el cambio
head(df_copy$Age) # Resultado
