x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
(intercept) x
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
model.offset()
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
summary(modelo)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
lm(formula = y ~ x)
#summary(modelo)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
summary(modelo)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
summary(modelo)
plot(x, y)
abline(modelo)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
summary(modelo)
plot(x, y)
abline(modelo)
predict(modelo, x[is.na(x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
summary(modelo)
plot(x, y)
abline(modelo)
class(x)
#predict(modelo, x[is.na(x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
class(x)
#predict(modelo, x[is.na(x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
class(data.frame(x))
#predict(modelo, x[is.na(x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
class(data.frame(x))
data.frame(x)
#predict(modelo, x[is.na(x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
x_df = data.frame(x)
predict(modelo, x_df[is.na(x_df$x)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
x_df = data.frame(x)
names(x_df) = c("X")
predict(modelo, x_df[is.na(x_df$X)])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
x_df = data.frame(x)
names(x_df) = c("X")
predict(modelo, x_df[is.na(x_df$X),])
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
x_df = data.frame(x)
names(x_df) = c("X")
predict(modelo, x_df)
x<-runif(100, min=30, max=70)
y<-x*2 - 7
x[c(20,25,39,59)]<-NA
modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
x_df = data.frame(x)
names(x_df) = c("X")
predict(modelo, x_df)
y
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight)]
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), ]
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
df_copy[is.na(df_copy$Height), c("ID", "Name", "Weight", "Height")]
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
summary(rlXHeightYWeight)
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
class(df_copy$Height[is.na(df_copy$Weight)])
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)])
lstHeigths
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
predict(rlXHeightYWeight, lstHeigths)
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
predict(rlXHeightYWeight, df_copy$Height)
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
predict(rlXHeightYWeight, as.list(df_copy$Height))
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
#lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
head(df_copy, 10)
predict(rlXHeightYWeight, as.list(df_copy$Height))
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
head(df_copy, 10)
predict(rlXHeightYWeight, newdata = lstHeigths)
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
#lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
head(df_copy, 10)
class(predict(rlXHeightYWeight, as.list(df_copy$Height)))
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
#lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
predictionsWeight = trun(predict(rlXHeightYWeight, as.list(df_copy$Height)))
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height)
#lstHeigths = as.list(df_copy$Height[is.na(df_copy$Weight)]) # Obtenemos los valores de la variable independiente (Height) para predecir la variable dependiente (Weight)
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height)))
predictionsWeight
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights = df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights = df_copy$ID[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights = df_copy$ID[is.na(df_copy$Weight)]
indexWeights
# x<-runif(100, min=30, max=70)
# y<-x*2 - 7
# x[c(20,25,39,59)]<-NA
#
# modelo = lm(formula = y ~ x)
#summary(modelo)
#plot(x, y)
#abline(modelo)
# x_df = data.frame(x)
# names(x_df) = c("X")
# predict(modelo, x_df)
# y
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights = df_copy$ID[is.na(df_copy$Weight)]
df_copy[is.na(df_copy$Height), c("ID", "Name", "Weight", "Height")]
indexHeights = df_copy$ID[is.na(df_copy$Height)] # Ïndices de los registros que debemos cambiar la altura
indexHeights
df_copy[is.na(df_copy$Height), c("ID", "Name", "Weight", "Height")]
indexHeights = df_copy$ID[is.na(df_copy$Height)] # Ïndices de los registros que debemos cambiar la altura
df_copy[is.na(df_copy$Weight), c("ID", "Name", "Weight", "Height")]
indexWeights = df_copy$ID[is.na(df_copy$Weight)] # Ïndices de los registros que debemos cambiar el peso
df_copy[is.na(df_copy$Height), c("ID", "Name", "Weight", "Height")]
indexHeights = df_copy$ID[is.na(df_copy$Height)] # Ïndices de los registros que debemos cambiar la altura
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
head(df_copy[indexHeights])
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
head(df_copy[indexWeights])
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
head(df_copy[indexWeights,])
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
head(df_copy[indexWeights, c("ID", "Name", "Weight", "Height")])
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
df_copy[indexWeights, c("ID", "Name", "Weight", "Height")] # Visualizamos los cambios
head(df_copy)
rlXHeightYWeight = lm(df_copy$Weight ~ df_copy$Height) # Creamos el modelo de regresión lineal
predictionsWeight = trunc(predict(rlXHeightYWeight, as.list(df_copy$Height))) # Hacemos las predicciones
df_copy$Weight[indexWeights] = predictionsWeight[indexWeights] # Imputamos los valores de las predicciones
df_copy[indexWeights, c("ID", "Name", "Weight", "Height")] # Visualizamos los cambios
rlXWeightYHeight = lm(df_copy$Height ~ df_copy$Weight) # Creamos el modelo de regresión lineal
predictionsHeight = trunc(predict(rlXWeightYHeight, as.list(df_copy$Weight))) # Hacemos las predicciones
df_copy$Height[indexHeights] = predictionsHeight[indexHeights] # Imputamos los valores de las predicciones
df_copy[indexHeights, c("ID", "Name", "Weight", "Height")] # Visualizamos los cambios
head(df_copy)
cat("El número de registros que tienen NA como peso son: ", nrow(df_copy[is.na(df_copy$Weight)]))
head(df_copy)
cat("El número de registros que tienen NA como peso son: ", nrow(df_copy[is.na(df_copy$Weight), ]))
head(df_copy)
cat("El número de registros que tienen NA como peso son: ", nrow(df_copy[is.na(df_copy$Weight), ]))
cat("El número de registros que tienen NA como altura son: ", nrow(df_copy[is.na(df_copy$Height), ]))
str(df_copy)
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Rating),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Height),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Weight),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Age),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Weak_foot),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Skill_Moves),])
# Rating Height Weight Age Weak_foot Skill_Moves Ball_Control
nrow(df_copy[is.na(df_copy$Ball_Control),])
# numericCols = unlist(lapply(df_copy, is.numeric))
# df_copy_numericCols =
str(df_copy)
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_copy_numericCols
install.packages("psych")
library(psych) # Importamos la librería para la media winsorizada
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
rownames(df_stadistic_table) = c("Media", "Mediana", "Media Recortada", "Media Winsor", "Desviación", "RIC", "DAM")
df_stadistic_table
library(psych) # Importamos la librería para la media winsorizada
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = psych.mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
rownames(df_stadistic_table) = c("Media", "Mediana", "Media Recortada", "Media Winsor", "Desviación", "RIC", "DAM")
df_stadistic_table
mean(df_copy$Rating)
median(df_copy$Rating)
mean(df_copy$Rating, trim = 0.05)
winsor.mean(df_copy$Rating, trim = 0.05)
sd(df_copy$Rating)
IQR(df_copy$Rating)
mad(df_copy$Rating)
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
rownames(df_stadistic_table) = c("Media", "Mediana", "Media Recortada", "Media Winsor", "Desviación", "RIC", "DAM")
df_stadistic_table
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
rownames(df_stadistic_table) = c("Media", "Mediana", "Media Recortada", "Media Winsor", "Desviación", "RIC", "DAM")
df_stadistic_table
library(psych)
calculateStadisticTable = function(values, nTrim = 0.05) {
nReturn = c()
if (is.numeric(values)) {
# Calculamos la media
media = mean(values)
# Mediana
mediana = median(values)
# Media recortada
medRecortada = mean(values, trim = nTrim)
# Media winsorizada
medWindor = winsor.mean(values, trim = nTrim)
# Desviación estándar
desviacion = sd(values)
# RIC
ric = IQR(values)
# DAM
dam = mad(values)
nReturn = c(media, mediana, medRecortada, medWindor, desviacion, ric, dam)
}
return(nReturn)
}
# Rating Height Weight Age
df_copy_numericCols = df_copy[, c("Rating", "Height", "Weight", "Age")]
df_stadistic_table = sapply(df_copy_numericCols, calculateStadisticTable)
rownames(df_stadistic_table) = c("Media", "Mediana", "Media Recortada", "Media Winsor", "Desviación", "RIC", "DAM")
df_stadistic_table
